---
description: 
globs: 
alwaysApply: true
---
This file structure reflects the draft-end architecture for MailMop v2 â€” a scalable, privacy-preserving Gmail analysis tool that helps users identify bulk senders, take action, and declutter their inboxes.

MailMop uses a client-heavy architecture, storing Gmail tokens in localStorage (not the backend), and fetching metadata-only content from Gmail (subject, sender, unsubscribe links â€” no body content).

Key design principles:

Client-first architecture: All Gmail API calls are made client-side, reducing server complexity and improving trust.

Context-driven state: We use React Contexts (Auth, Gmail, Analysis) to handle user auth/session state, Gmail token, and inbox analysis data.

Progressive analysis: Inbox scanning happens in batches, with partial results updating the UI in real-time.

Supabase minimal backend: Used only for auth (Google OAuth), whitelisting beta users, and logging actions (analysis, delete, unsubscribe).

Modular hooks and lib structure: All API calls, parsing, and token handling are cleanly abstracted for maintainability and reuse.

The current codebase is designed to support:

âœ… Gmail inbox analysis (metadata scope only)

âœ… Sender-level insights and actions (delete, block, unsubscribe)

âœ… Beta whitelist gating

âœ… Paywall readiness (via plan field in Supabase)

âœ… Offline-safe localStorage caching for inbox scans

ðŸš« No server-side Gmail access or email storage for privacy and quota efficiency

In scope soon:

- Bulk action toolbar for multiple senders
- Stripe billing + Upgrade modal

Use this structure to stay modular and scale features rapidly. New features should plug into the hooks/ and lib/ architecture, while UI remains in components/ and state in context/. Actions should always log to Supabase for potential analytics/paywall tracking.

Here's what the rough file tree should look like: 

MailMop/
â”œâ”€â”€ public/                     # Static assets (logo, Open Graph, etc.)
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ layout.tsx          # Wraps app in Auth, Gmail, and Analysis contexts
â”‚   â”‚   â”œâ”€â”€ page.tsx            # Public landing page (CTA to sign in)
â”‚   â”‚   â””â”€â”€ dashboard/
â”‚   â”‚       â”œâ”€â”€ layout.tsx      # Auth + whitelist protected dashboard wrapper
â”‚   â”‚       â””â”€â”€ page.tsx        # Main inbox analysis experience
â”‚
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”‚   â””â”€â”€ SignInButton.tsx        # Supabase + Google OAuth
â”‚   â”‚   â”œâ”€â”€ dashboard/
â”‚   â”‚   â”‚   â”œâ”€â”€ TopBar.tsx              # Logo, Gmail status, plan, sign out
â”‚   â”‚   â”‚   â”œâ”€â”€ AnalysisControls.tsx    # Filter checkboxes + Analyze button
â”‚   â”‚   â”‚   â”œâ”€â”€ SenderTable.tsx         # Sender frequency table (paginated)
â”‚   â”‚   â”‚   â””â”€â”€ ActionDropdown.tsx      # Row-level actions (delete, block, etc.)
â”‚   â”‚   â”œâ”€â”€ modals/
â”‚   â”‚   â”‚   â”œâ”€â”€ BetaWaitlistModal.tsx   # Not whitelisted modal
â”‚   â”‚   â”‚   â”œâ”€â”€ GrantPermissionsModal.tsx # No token yet
â”‚   â”‚   â”‚   â””â”€â”€ RegrantPermissionsModal.tsx # Token expired
â”‚   â”‚   â””â”€â”€ feedback/
â”‚   â”‚       â””â”€â”€ Toast.tsx               # Reusable toast system (success/fail)
â”‚
â”‚   â”œâ”€â”€ context/
â”‚   â”‚   â”œâ”€â”€ AuthProvider.tsx            # Supabase session + user profile
â”‚   â”‚   â”œâ”€â”€ GmailProvider.tsx           # Gmail token + profile
â”‚   â”‚   â””â”€â”€ AnalysisProvider.tsx        # Tracks inbox analysis state
â”‚
â”‚   â”œâ”€â”€ hooks/
â”‚   â”‚   â”œâ”€â”€ useAuthListener.ts          # Syncs Supabase session
â”‚   â”‚   â”œâ”€â”€ useUserProfile.ts           # CRUD for Supabase profile
â”‚   â”‚   â”œâ”€â”€ useWhitelist.ts             # Beta access check
â”‚   â”‚   â”œâ”€â”€ usePlan.ts                  # Pulls free/pro tier
â”‚   â”‚   â”œâ”€â”€ useGmailAuth.ts             # Gmail OAuth (gapi)
â”‚   â”‚   â”œâ”€â”€ useGmailProfile.ts          # Fetch total messages, threads
â”‚   â”‚   â”œâ”€â”€ useAnalysis.ts              # Inbox batch scan logic
â”‚   â”‚   â”œâ”€â”€ useDeleteEmails.ts          # Deletes Gmail messages
â”‚   â”‚   â”œâ”€â”€ useBlockSender.ts           # (Optional) Gmail filter to block sender
â”‚   â”‚   â”œâ”€â”€ useUnsubscribe.ts           # Opens unsubscribe links
â”‚   â”‚   â”œâ”€â”€ useCopyQuery.ts             # Copies Gmail query string
â”‚   â”‚   â””â”€â”€ useViewInGmail.ts           # Opens Gmail search URL
â”‚
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â”œâ”€â”€ gmail/
â”‚   â”‚   â”‚   â”œâ”€â”€ initClient.ts           # gapi init with correct scope
â”‚   â”‚   â”‚   â”œâ”€â”€ fetchMessageIds.ts      # Gmail query -> message IDs
â”‚   â”‚   â”‚   â”œâ”€â”€ fetchMetadata.ts        # Fetch headers for messages
â”‚   â”‚   â”‚   â”œâ”€â”€ parseHeaders.ts         # Extract name, email, unsub, subject
â”‚   â”‚   â”‚   â”œâ”€â”€ batchDelete.ts          # Gmail batch delete API
â”‚   â”‚   â”‚   â”œâ”€â”€ createFilter.ts         # Optional: Gmail block sender
â”‚   â”‚   â”‚   â”œâ”€â”€ buildQuery.ts           # Converts filters to Gmail search
â”‚   â”‚   â”‚   â””â”€â”€ backoff.ts              # Exponential retry handler
â”‚   â”‚   â””â”€â”€ localStorage.ts             # Save/load CachedAnalysis from localStorage
â”‚
â”‚   â”œâ”€â”€ supabase/
â”‚   â”‚   â”œâ”€â”€ client.ts                   # Supabase browser client
â”‚   â”‚   â”œâ”€â”€ profile.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ getProfile.ts           # Load from `profiles`
â”‚   â”‚   â”‚   â””â”€â”€ upsertProfile.ts        # Create/update
â”‚   â”‚   â”œâ”€â”€ whitelist.ts
â”‚   â”‚   â”‚   â””â”€â”€ isWhitelisted.ts        # Checks `whitelisted_users`
â”‚   â”‚   â””â”€â”€ actions.ts
â”‚   â”‚       â””â”€â”€ logAction.ts            # Logs analysis, delete, unsub, etc.
â”‚
â”‚   â”œâ”€â”€ types/
â”‚   â”‚   â”œâ”€â”€ gmail.ts                    # Message, sender, GmailProfile
â”‚   â”‚   â”œâ”€â”€ user.ts                     # SupabaseProfile, Plan, etc.
â”‚   â”‚   â”œâ”€â”€ analysis.ts                 # SenderResult, CachedAnalysis, Progress
â”‚   â”‚   â”œâ”€â”€ context.ts                  # Auth/Gmail/Analysis context types
â”‚   â”‚   â””â”€â”€ actions.ts                  # ActionType enum for logging
â”‚
â”‚   â”œâ”€â”€ styles/
â”‚   â”‚   â”œâ”€â”€ globals.css                 # Tailwind base styles and resets
â”‚   â”‚   â””â”€â”€ theme.css                   # Optional: theme tokens (light/dark)
â”‚
â”‚   â””â”€â”€ middleware.ts                   # Protects `/dashboard` via Supabase session
â”‚
â”œâ”€â”€ .env.local                          # Your private dev keys (never commit)
â”œâ”€â”€ .env.example                        # Shared reference for contributors
â”œâ”€â”€ LICENSE.md                          # MIT license or other
â”œâ”€â”€ README.md                           # Setup, architecture, usage, privacy model
â”œâ”€â”€ next.config.js                      # Next.js config
â”œâ”€â”€ tailwind.config.ts                  # Tailwind setup
â”œâ”€â”€ tsconfig.json                       # TypeScript config
â”œâ”€â”€ .gitignore


