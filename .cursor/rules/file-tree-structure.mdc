---
description: 
globs: 
alwaysApply: true
---
This structure reflects MailMop v2 â€” a client-heavy, privacy-focused Gmail inbox decluttering tool built on Next.js App Router, Supabase, and Gmail API metadata scope (read-only). Itâ€™s designed to support inboxes with 50kâ€“500k+ emails using progressive batching, real-time updates, and efficient local storage.

ðŸ”’ Architectural Principles

Client-First: Gmail API calls are made in the browser using gapi, never server-side. Tokens are stored in localStorage (auth) and some data in IndexedDB (heavy metadata).

Context-Driven State: AuthProvider, GmailPermissionsProvider, AnalysisProvider provide scoped state for the app.

Progressive Analysis: We analyze inboxes in batches (e.g., 100 messages at a time) and incrementally update results.

Supabase Usage:

Auth (OAuth with Google)

Beta Whitelist

Logging actions (delete, unsubscribe, etc.) soley for analytics purposes

Plan management (for paywall logic)


ðŸ§± Directory Structure (current + planned)

MailMop/
â”œâ”€â”€ public/                  # Static assets (logo, icons)
â”‚
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app/                 # Next.js App Router structure
â”‚   â”‚   â”œâ”€â”€ layout.tsx       # Root layout (wraps providers)
â”‚   â”‚   â”œâ”€â”€ page.tsx         # Landing page
â”‚   â”‚   â””â”€â”€ dashboard/
â”‚   â”‚       â”œâ”€â”€ layout.tsx   # Dashboard shell (auth + whitelist enforced)
â”‚   â”‚       â””â”€â”€ page.tsx     # Main analysis experience
â”‚   â”‚       â”œâ”€â”€ privacy/     # Static privacy page
â”‚   â”‚       â””â”€â”€ terms/       # Static terms page
â”‚
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ TopBar/                          # Dashboard header
â”‚   â”‚   â”‚   â”œâ”€â”€ GmailConnectionStatus.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ TopBar.tsx
â”‚   â”‚   â”‚   â””â”€â”€ UserDropdown.tsx
â”‚   â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”‚   â””â”€â”€ SignInButton.tsx
â”‚   â”‚   â”œâ”€â”€ dashboard/
â”‚   â”‚   â”‚   â”œâ”€â”€ Footer.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Overview.tsx                # Includes stats + reanalyze button (planned)
â”‚   â”‚   â”‚   â”œâ”€â”€ InboxAnalysisContainer.tsx  # Wraps analysis table + controls
â”‚   â”‚   â”‚   â”œâ”€â”€ overview/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ InboxStats.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ analysis/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ AnalysisView.tsx        # Includes table + controls
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ SenderTable.tsx         # PLANNED
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ SenderHeader.tsx        # PLANNED: Bulk toolbar
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ SenderRow.tsx           # PLANNED: Row rendering
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ SenderActions.tsx       # PLANNED: Row-level actions (delete, block, etc.)
â”‚   â”‚   â”‚   â””â”€â”€ analysisintro/
â”‚   â”‚   â”‚       â”œâ”€â”€ IntroStepper.tsx
â”‚   â”‚   â”‚       â”œâ”€â”€ Step1_ConnectGmail.tsx
â”‚   â”‚   â”‚       â””â”€â”€ Step2_RunAnalysis.tsx
â”‚   â”‚   â”œâ”€â”€ modals/
â”‚   â”‚   â”‚   â”œâ”€â”€ BetaWaitlistModal.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ GrantPermissionsModal.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ RevokeAccessDialog.tsx
â”‚   â”‚   â”‚   â””â”€â”€ SignOutDialog.tsx
â”‚   â”‚   â””â”€â”€ ui/                              # Shared UI components (ShadCN base)
â”‚   â”‚       â”œâ”€â”€ bento-grid.tsx
â”‚   â”‚       â”œâ”€â”€ button.tsx
â”‚   â”‚       â”œâ”€â”€ card.tsx
â”‚   â”‚       â”œâ”€â”€ dialog.tsx
â”‚   â”‚       â””â”€â”€ tooltip.tsx
â”‚
â”‚   â”œâ”€â”€ context/
â”‚   â”‚   â”œâ”€â”€ AuthProvider.tsx
â”‚   â”‚   â”œâ”€â”€ GmailPermissionsProvider.tsx
â”‚   â”‚   â””â”€â”€ AnalysisProvider.tsx
â”‚
â”‚   â”œâ”€â”€ hooks/
â”‚   â”‚   â”œâ”€â”€ useActionStats.ts
â”‚   â”‚   â”œâ”€â”€ useAnalysisOperations.ts        # Central hook for inbox analysis logic
â”‚   â”‚   â”œâ”€â”€ useGmailStats.ts
â”‚   â”‚   â”œâ”€â”€ useUserProfile.ts
â”‚   â”‚   â”œâ”€â”€ useWhitelist.ts
â”‚   â”‚   â”œâ”€â”€ useDelete.ts                    # PLANNED
â”‚   â”‚   â”œâ”€â”€ useBlock.ts                     # PLANNED
â”‚   â”‚   â”œâ”€â”€ useUnsubscribe.ts               # PLANNED
â”‚   â”‚   â”œâ”€â”€ useCopyQuery.ts                 # PLANNED
â”‚   â”‚   â”œâ”€â”€ useViewInGmail.ts               # PLANNED
â”‚   â”‚   â””â”€â”€ useExport.ts                    # PLANNED
â”‚
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â”œâ”€â”€ gmail/
â”‚   â”‚   â”‚   â”œâ”€â”€ fetchGmailStats.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ fetchProfile.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ fetchMessageIds.ts          # PLANNED
â”‚   â”‚   â”‚   â”œâ”€â”€ fetchMetadata.ts            # PLANNED
â”‚   â”‚   â”‚   â”œâ”€â”€ parseHeaders.ts             # PLANNED
â”‚   â”‚   â”‚   â”œâ”€â”€ buildQuery.ts               # PLANNED
â”‚   â”‚   â”‚   â”œâ”€â”€ backoff.ts                  # PLANNED
â”‚   â”‚   â”‚   â””â”€â”€ tokenStorage.ts
â”‚   â”‚   â”œâ”€â”€ storage/
â”‚   â”‚   â”‚   â”œâ”€â”€ actionStorage.ts
â”‚   â”‚   â”‚   â””â”€â”€ senderAnalysis.ts
â”‚   â”‚   â””â”€â”€ utils.ts
â”‚
â”‚   â”œâ”€â”€ supabase/
â”‚   â”‚   â”œâ”€â”€ client.ts
â”‚   â”‚   â”œâ”€â”€ profile/
â”‚   â”‚   â”‚   â”œâ”€â”€ getProfile.ts
â”‚   â”‚   â”‚   â””â”€â”€ upsertProfile.ts
â”‚   â”‚   â”œâ”€â”€ whitelist.ts
â”‚   â”‚   â””â”€â”€ actions.ts                      # PLANNED: logAction per user + action
â”‚
â”‚   â”œâ”€â”€ types/
â”‚   â”‚   â”œâ”€â”€ gmail.ts
â”‚   â”‚   â”œâ”€â”€ user.ts
â”‚   â”‚   â”œâ”€â”€ analysis.ts                     # PLANNED: SenderResult, AnalysisMetadata
â”‚   â”‚   â””â”€â”€ actions.ts                      # PLANNED: ActionType enum
â”‚
â”‚   â””â”€â”€ middleware.ts                       # Auth gate for /dashboard
â”‚
â”œâ”€â”€ .env.local
â”œâ”€â”€ .env.example
â”œâ”€â”€ README.md
â”œâ”€â”€ next.config.mjs
â”œâ”€â”€ tailwind.config.js
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ postcss.config.mjs